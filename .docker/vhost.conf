# Default encrypted webserver.
server {
    server_name example.com;
    listen           443 ssl http2 default_server;
    listen      [::]:443 ssl http2 default_server;

    server_tokens off;

    gzip            on;
    gzip_min_length 5000;
    gzip_types      text/plain text/css application/javascript application/json;

    index index.php index.html;
    root /var/www/public;
    log_not_found off;
    client_max_body_size 50m;

    include /etc/nginx/conf.d/*.include;
    include /etc/nginx/conf.d/ssl.include.special;

    location ~ ^/(assets|vendor|storage|doc)($|/) {
        # Disable rewrite for directories with static files.
        # We do this so the app is not started to serve 404s if a file is missing.
    }

    location / {
        try_files $uri /index.php?$args;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass            app:9000;
        fastcgi_index           index.php;
        include                 fastcgi_params;
        fastcgi_param           SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param           PATH_INFO $fastcgi_path_info;
    }
}

# Redirect to encrypted connection.
server {
    server_name example.com;
    listen      80;
    listen [::]:80;

    server_tokens off;
    return 301 https://$host$request_uri;
}

# Connection to websockets server.
server {
    listen 6002 ssl http2;
    listen [::]:6002 ssl http2;
    server_name example.com;
    server_tokens off;
    root /var/www/public;

    include /etc/nginx/conf.d/*.include;
    include /etc/nginx/conf.d/ssl.include.special;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    charset utf-8;

    location / {
        proxy_pass             http://websockets:6001;
        proxy_read_timeout     60;
        proxy_connect_timeout  60;
        proxy_redirect         off;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    access_log off;
}
